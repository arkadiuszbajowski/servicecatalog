AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for a Step Function to deploy and destroy Terraform using CodeBuild

Parameters:
  VPCName:
    Type: String
    Description: Name of the VPC

  VPCCidr:
    Type: String
    Description: CIDR block for the VPC

  CodeBuildProjectName:
    Type: String
    Description: Name of the CodeBuild Project
    Default: ServiceCatalog

Resources:
  CodeBuildBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeBuildBasePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      Description: CodeBuild project for Terraform operations
      ServiceRole: !GetAtt CodeBuildBaseRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: VPC_NAME
            Value: !Ref VPCName
          - Name: VPC_CIDR
            Value: !Ref VPCCidr
      Source:
        Type: GITHUB
        Location: "https://github.com/arkadiuszbajowski/servicecatalog.git"
        BuildSpec: "buildspec.yaml"
      SourceVersion: "refs/heads/main"
      TimeoutInMinutes: 10

  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: TerraformDeploymentStateMachine
    Properties:
      Handle: !Ref WaitHandle
      Timeout: "120"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              
  SignalingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SignalingLambdaFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          import urllib.request

          def handler(event, context):
              # Accessing response_url from event
              response_url = event['WaitConditionHandleUrl']
              headers = {'Content-Type': 'application/json'}
              body = json.dumps({
                  "Status" : "SUCCESS",
                  "Reason" : "Configuration Complete",
                  "UniqueId" : "LambdaSignal",
                  "Data" : "Workflow completed."
              })

              # Convert body to bytes, as the urlopen method expects bytes-like object for the data parameter
              body = body.encode('utf-8')

              req = urllib.request.Request(response_url, data=body, headers=headers, method='PUT')
              with urllib.request.urlopen(req) as response:
                  return response.read().decode('utf-8')

      Environment:
        Variables:
          ResponseURL: !Ref WaitHandle

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StateMachinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                  - lambda:InvokeFunction
                  - codebuild:*
                Resource: "*"

  TerraformDeploymentStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: 
        !Sub |
          {
            "Comment": "A Step Function to execute Terraform CodeBuild Projects",
            "StartAt": "ActionChoice",
            "States": {
              "ActionChoice": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.action",
                    "StringEquals": "plan",
                    "Next": "TerraformPlan"
                  },
                  {
                    "Variable": "$.action",
                    "StringEquals": "apply",
                    "Next": "TerraformPlanAndApply"
                  },
                  {
                    "Variable": "$.action",
                    "StringEquals": "destroy",
                    "Next": "TerraformPlanAndDestroy"
                  }
                ],
                "Default": "TerraformPlan"
              },
              "TerraformPlan": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${CodeBuildProjectName}",
                  "EnvironmentVariablesOverride": [
                    {
                      "Name": "COMMAND",
                      "Value": "plan"
                    }
                  ]
                },
                "Next": "SignalWaitCondition"
              },
              "TerraformPlanAndApply": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${CodeBuildProjectName}",
                  "EnvironmentVariablesOverride": [
                    {
                      "Name": "COMMAND",
                      "Value": "plan"
                    }
                  ]
                },
                "Next": "WaitForApplyApproval"
              },
              "WaitForApplyApproval": {
                "Type": "Pass",
                "Next": "TerraformApply"
              },
              "TerraformApply": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${CodeBuildProjectName}",
                  "EnvironmentVariablesOverride": [
                    {
                      "Name": "COMMAND",
                      "Value": "apply"
                    }
                  ]
                },
                "Next": "SignalWaitCondition"
              },
              "TerraformPlanAndDestroy": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${CodeBuildProjectName}",
                  "EnvironmentVariablesOverride": [
                    {
                      "Name": "COMMAND",
                      "Value": "plan"
                    }
                  ]
                },
                "Next": "WaitForDestroyApproval"
              },
              "WaitForDestroyApproval": {
                "Type": "Pass",
                "Next": "TerraformDestroy"
              },
              "TerraformDestroy": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${CodeBuildProjectName}",
                  "EnvironmentVariablesOverride": [
                    {
                      "Name": "COMMAND",
                      "Value": "destroy"
                    }
                  ]
                },
                "Next": "SignalWaitCondition"
              },
              "SignalWaitCondition": {
                "Type": "Task",
                "Resource": "${SignalingLambdaFunction.Arn}",
                "End": true
              }
            }
          }
      RoleArn: !GetAtt StateMachineRole.Arn
      StateMachineName: TerraformDeploymentStateMachine
      StateMachineType: STANDARD

  StateMachineExecutorLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt StateMachineExecutorRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          client = boto3.client('stepfunctions')

          def handler(event, context):
              try:
                  action = 'apply' if event['RequestType'] == 'Create' else 'destroy'
                  response = client.start_execution(
                      stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                      input=json.dumps({
                          "action": action,
                          "vpcName": event['ResourceProperties']['VPCName'],
                          "vpcCidr": event['ResourceProperties']['VPCCidr'],
                          "signalUrl": os.environ['SIGNAL_URL'],
                      })
                  )
                  return {
                      'PhysicalResourceId': response['executionArn'],
                      'Data': {
                          'ExecutionArn': response['executionArn']
                      }
                  }
              except Exception as e:
                  # In case of any errors, catch the exception and return a 'FAILED' status to CloudFormation
                  error_message = str(e)
                  print(f"Error: {error_message}")
                  response_data = {
                      'Error': error_message
                  }
                  return {
                      'Status': 'FAILED',
                      'Reason': error_message,
                      'Data': response_data
                  }
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref TerraformDeploymentStateMachine
          SIGNAL_URL: !Ref WaitHandle
      Runtime: "python3.8"
      Timeout: "60"

  StepFunctionTrigger:
    Type: "Custom::StateMachineTrigger"
    Properties:
      ServiceToken: !GetAtt StateMachineExecutorLambda.Arn
      VPCName: !Ref VPCName
      VPCCidr: !Ref VPCCidr

  StateMachineExecutorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "StateMachineExecutorPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource: !Ref TerraformDeploymentStateMachine