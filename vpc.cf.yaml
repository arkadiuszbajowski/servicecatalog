AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for a Step Function to deploy and destroy Terraform using CodeBuild

Parameters:
  VPCName:
    Type: String
    Description: Name of the VPC

  VPCCidr:
    Type: String
    Description: CIDR block for the VPC

  CodeBuildProjectName:
    Type: String
    Description: Name of the CodeBuild Project
    Default: ServiceCatalog

Resources:
  CodeBuildBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeBuildBasePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents      
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:*
                  - ec2:*
                  - iam:*
                  - sts:*
                Resource: "*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      Description: CodeBuild project for Terraform operations
      ServiceRole: !GetAtt CodeBuildBaseRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: VPC_NAME
            Value: !Ref VPCName
          - Name: VPC_CIDR
            Value: !Ref VPCCidr
      Source:
        Type: GITHUB
        Location: "https://github.com/arkadiuszbajowski/servicecatalog.git"
        BuildSpec: "buildspec.yaml"
      SourceVersion: "refs/heads/main"
      TimeoutInMinutes: 10

  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    DependsOn: TerraformDeploymentStateMachine
    Properties:
      Handle: !Ref WaitHandle
      Timeout: "180"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  ErrorSignalingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Environment:
        Variables:
          ResponseURL: !Ref WaitHandle
      Code:
        ZipFile: |
          import os
          import json
          import urllib.request

          def handler(event, context):
              # Accessing response_url from event
              response_url = os.environ['ResponseURL']

              body = json.dumps({
                  "Status": "FAILURE",
                  "Reason": "Configuration Complete",
                  "UniqueId": "LambdaSignal",
                  "Data": "Workflow completed."
              })

              # Convert body to bytes, as the urlopen method expects bytes-like object for the data parameter
              body_bytes = body.encode('utf-8')

              headers = {
                  'Content-Type': ''   # Set an empty Content-Type similar to "Content-Type:" in your curl command
              }

              print(response_url)
              req = urllib.request.Request(response_url, data=body_bytes, headers=headers, method='PUT')

              # By default, urllib uses a timeout of 60 seconds. We'll set it to 10 seconds to match your curl command's --connect-timeout
              try:
                  with urllib.request.urlopen(req, timeout=10) as response:
                      response_text = response.read().decode('utf-8')

                  # Print the response to CloudWatch logs
                  print(f"Response from CloudFormation: {response_text}")

                  # Return the response
                  return response_text

              except urllib.error.URLError as e:
                  print(f"Error occurred while sending the request: {e}")
                  return f"Error: {e}"              
  SuccessSignalingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import os
          import json
          import urllib.request

          def handler(event, context):
              # Accessing response_url from event
              response_url = os.environ['ResponseURL']

              body = json.dumps({
                  "Status": "SUCCESS",
                  "Reason": "Configuration Complete",
                  "UniqueId": "LambdaSignal",
                  "Data": "Workflow completed."
              })

              # Convert body to bytes, as the urlopen method expects bytes-like object for the data parameter
              body_bytes = body.encode('utf-8')

              headers = {
                  'Content-Type': ''   # Set an empty Content-Type similar to "Content-Type:" in your curl command
              }

              print(response_url)
              req = urllib.request.Request(response_url, data=body_bytes, headers=headers, method='PUT')

              # By default, urllib uses a timeout of 60 seconds. We'll set it to 10 seconds to match your curl command's --connect-timeout
              try:
                  with urllib.request.urlopen(req, timeout=10) as response:
                      response_text = response.read().decode('utf-8')

                  # Print the response to CloudWatch logs
                  print(f"Response from CloudFormation: {response_text}")

                  # Return the response
                  return response_text

              except urllib.error.URLError as e:
                  print(f"Error occurred while sending the request: {e}")
                  return f"Error: {e}"    

              

      Environment:
        Variables:
          ResponseURL: !Ref WaitHandle

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StateMachinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                  - lambda:InvokeFunction
                  - codebuild:*
                  
                Resource: "*"

  TerraformDeploymentStateMachine:
    Type: AWS::StepFunctions::StateMachine
    
    Properties:
      DefinitionString: 
        !Sub |
          {
            "Comment": "A Step Function to execute Terraform CodeBuild Projects",
            "StartAt": "ActionChoice",
            "States": {
              "ActionChoice": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.action",
                    "StringEquals": "plan",
                    "Next": "TerraformPlan"
                  },
                  {
                    "Variable": "$.action",
                    "StringEquals": "apply",
                    "Next": "TerraformPlanAndApply"
                  },
                  {
                    "Variable": "$.action",
                    "StringEquals": "destroy",
                    "Next": "TerraformPlanAndDestroy"
                  }
                ],
                "Default": "TerraformPlan"
              },
              "TerraformPlan": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${CodeBuildProjectName}",
                  "EnvironmentVariablesOverride": [
                    {
                      "Name": "TF_ACTION",
                      "Value": "plan"
                    }
                  ]
                },
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "LambdaErrorSignal"
                  }
                ],
                "Next": "SignalWaitCondition"
              },
              "TerraformPlanAndApply": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${CodeBuildProjectName}",
                  "EnvironmentVariablesOverride": [
                    {
                      "Name": "TF_ACTION",
                      "Value": "apply"
                    }
                  ]
                },
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "LambdaErrorSignal"
                  }
                ],
                "Next": "SignalWaitCondition"
              },
              "TerraformPlanAndDestroy": {
                "Type": "Task",
                "Resource": "arn:aws:states:::codebuild:startBuild.sync",
                "Parameters": {
                  "ProjectName": "${CodeBuildProjectName}",
                  "EnvironmentVariablesOverride": [
                    {
                      "Name": "TF_ACTION",
                      "Value": "destroy"
                    }
                  ]
                },
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "LambdaErrorSignal"
                  }
                ],
                "Next": "SignalWaitCondition"
              },
              "SignalWaitCondition": {
                "Type": "Task",
                "Resource": "${SuccessSignalingLambdaFunction.Arn}",
                "End": true
              },
              "LambdaErrorSignal": {
                "Type": "Task",
                "Resource": "${ErrorSignalingLambdaFunction.Arn}",
                "End": true
              }
            }
          }
      RoleArn: !GetAtt StateMachineRole.Arn
      StateMachineType: STANDARD

  StateMachineExecutorLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt StateMachineExecutorRole.Arn
      Code:
        ZipFile: |
          import json
          import logging
          import os
          import boto3
          from urllib.request import Request, build_opener, HTTPHandler

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          client = boto3.client('stepfunctions')

          def handler(event, context):
              '''Handle Lambda event from AWS'''
              try:
                  LOGGER.info('REQUEST RECEIVED:\n %s', event)
                  LOGGER.info('REQUEST RECEIVED:\n %s', context)
                  
                  if event['RequestType'] == 'Create':
                      LOGGER.info('CREATE!')
                      response = client.start_execution(
                          stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                          input=json.dumps({
                              "action": "apply",
                              "vpcName": event['ResourceProperties']['VPCName'],
                              "vpcCidr": event['ResourceProperties']['VPCCidr'],
                              "signalUrl": os.environ['SIGNAL_URL'],
                          })
                      )
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource creation successful!", "ExecutionArn": response['executionArn']})
                                    
                  elif event['RequestType'] == 'Update':
                      LOGGER.info('UPDATE!')
                      response = client.start_execution(
                          stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                          input=json.dumps({
                              "action": "update",
                              "vpcName": event['ResourceProperties']['VPCName'],
                              "vpcCidr": event['ResourceProperties']['VPCCidr'],
                              "signalUrl": os.environ['SIGNAL_URL'],
                          })
                      )
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource update successful!", "ExecutionArn": response['executionArn']})
                                    
                  elif event['RequestType'] == 'Delete':
                      LOGGER.info('DELETE!')
                      response = client.start_execution(
                          stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                          input=json.dumps({
                              "action": "destroy",
                              "vpcName": event['ResourceProperties']['VPCName'],
                              "vpcCidr": event['ResourceProperties']['VPCCidr'],
                              "signalUrl": os.environ['SIGNAL_URL'],
                          })
                      )
                      send_response(event, context, "SUCCESS",
                                    {"Message": "Resource deletion successful!"})

                  else:
                      LOGGER.info('FAILED!')
                      send_response(event, context, "FAILED",
                                    {"Message": "Unexpected event received from CloudFormation"})
                                    
              except Exception as e:
                  LOGGER.info('FAILED due to error: %s', e)
                  send_response(event, context, "FAILED", {
                      "Message": "Exception during processing: " + str(e)})

          def send_response(event, context, response_status, response_data):
              '''Send a resource manipulation status response to CloudFormation'''
              response_body = json.dumps({
                  "Status": response_status,
                  "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event['StackId'],
                  "RequestId": event['RequestId'],
                  "LogicalResourceId": event['LogicalResourceId'],
                  "Data": response_data
              })

              LOGGER.info('ResponseURL: %s', event['ResponseURL'])
              LOGGER.info('ResponseBody: %s', response_body)

              opener = build_opener(HTTPHandler)
              request = Request(event['ResponseURL'], data=response_body.encode())
              request.add_header('Content-Type', '')
              request.add_header('Content-Length', len(response_body))
              request.get_method = lambda: 'PUT'
              response = opener.open(request)
              LOGGER.info("Status code: %s", response.getcode())
              LOGGER.info("Status message: %s", response.msg)
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref TerraformDeploymentStateMachine
          SIGNAL_URL: !Ref WaitHandle
      Runtime: "python3.8"
      Timeout: "60"

  StepFunctionTrigger:
    Type: "Custom::StateMachineTrigger"
    DependsOn: CodeBuildProject
    Properties:
      ServiceToken: !GetAtt StateMachineExecutorLambda.Arn
      VPCName: !Ref VPCName
      VPCCidr: !Ref VPCCidr

  StateMachineExecutorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "StateMachineExecutorPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource: !Ref TerraformDeploymentStateMachine